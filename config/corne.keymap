#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // Requires zmk-auto-layer module.
#include <behaviors/unicode.dtsi> // Requires zmk-unicode module.
#include <zmk-helpers/helper.h> // Requires zmk-helpers module.
#include <zmk-helpers/key-labels/42.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "layout/corne-keys.dtsi"
#include "layout/specialkeys.dtsi"

#define _BT_SEL_KEYS_                                                        \
    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR

// QWERTY LAYOUT
#define L_MAIN 0
// NAVIGATION
#define L_NAV 1
// FUNCTIONS
#define L_FN 2
// NUMBERS
#define L_NUM 3
// SYMBOLS
#define L_SYM 4
// SYSTEM
#define L_SYS 5
// MOUSE
#define L_MOU 6

// GLOBALS
#define QUICK_TAP_MS 175

&sk {
  release-after-ms = <900>;
  quick-release;
};

&sl { // Allow sticky mods to chord across sticky layers.
  ignore-modifiers;
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <QUICK_TAP_MS>;
};

#include "layout/combos.dtsi" // Must be sourced after HRM-combo hack.
#include "layout/leader.dtsi"
#include "layout/mouse.dtsi"
#include "layout/homerow.dtsi"

// Trigger tap-action on all interrupts.
#define MT_CORE                                                                \
  flavor = "tap-preferred";                                                    \
  tapping-term-ms = <220>;                                                     \
  quick-tap-ms = <220>;                                                        \
  hold-trigger-key-positions = <0>;

&mt { MT_CORE };

ZMK_HOLD_TAP(mt_home, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_HOLD_TAP(mt_end, bindings = <&masked_end>, <&kp>; MT_CORE)

// Mask CTRL on left/right hold to avoid accidental jumps to start/end of doc.
#define MASK_MODS(NAME, MODS, BINDING)                                         \
  ZMK_MOD_MORPH(NAME, bindings = <BINDING>, <BINDING>; mods = <MODS>;)

MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

/* Magic-shift & auto-layers */

// Tap: repeat after alpha, else sticky-shift |
// Shift + tap/ double-tap: caps-word | Hold: shift.
#define MAGIC_SHIFT &magic_shift LSHFT 0
ZMK_HOLD_TAP(magic_shift, bindings = <&kp>, <&magic_shift_tap>;
             flavor = "balanced"; tapping-term-ms = <200>;
             quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_MOD_MORPH(magic_shift_tap, bindings = <&shift_repeat>, <&caps_word>;
              mods = <(MOD_LSFT)>;)
ZMK_ADAPTIVE_KEY(
    shift_repeat, bindings = <&sk LSHFT>;
    repeat {
      trigger-keys = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
      bindings = <&key_repeat>;
      max-prior-idle-ms = <1200>;
      strict-modifiers;
    };)
&caps_word { // Mods deactivate caps-word, requires PR #1451. [TODO: rebase]
  /delete-property/ ignore-modifiers;
};


// Tap: num-word | double-tap: sticky num-layer | Hold: num-layer.
#define SMART_NUM &smart_num L_NUM 0
ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_dance>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_TAP_DANCE(num_dance, bindings = <&mo L_NUM>, <&sl L_NUM>;
              tapping-term-ms = <200>;)


// Define mod-morph with a *single* mod trigger for less repetition.
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2)                            \
  ZMK_MOD_MORPH(NAME, mods = <(MOD_L##MOD | MOD_R##MOD)>;                      \
                bindings = <BINDING1>, <BINDING2>;)

// Tap: comma | Shift + tap: semicolon | Ctrl + shift + tap: <.
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// Tap: dot | Shift + tap: colon | Ctrl + shift + tap: >.
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// Tap: qmark | Shift + tap: excl.
SIMPLE_MORPH(qexcl, SFT, &kp QMARK, &kp EXCL)

// Tap: left/right parenthesis | Shft + tap: less-than/greater-than.
SIMPLE_MORPH(lpar_lt, SFT, &kp LPAR, &kp LT)
SIMPLE_MORPH(rpar_gt, SFT, &kp RPAR, &kp GT)

// Tap: space | Shift + tap: dot -> space -> sticky shift | Hold: nav layer.
ZMK_HOLD_TAP(lt_spc, bindings = <&mo>, <&spc_morph>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
SIMPLE_MORPH(spc_morph, SFT, &kp SPACE, &dot_spc)
ZMK_MACRO(dot_spc, bindings = <&kp DOT &kp SPACE &sk LSHFT>; wait-ms = <0>;
          tap-ms = <5>;)

// Tap: backspace | Lshft + tap: delete | Rshft + tap: shift-delete.
ZMK_MOD_MORPH(bs_del, bindings = <&kp BSPC>, <&kp DEL>;
              mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <MOD_RSFT>;)

// Tap: copy | double-tap: cut.
ZMK_TAP_DANCE(copy_cut, bindings = <&kp LC(INS)>, <&kp LC(X)>;
              tapping-term-ms = <200>;)

// Sticky shift + leader.
ZMK_MACRO(leader_sft, bindings = <&sk LSHFT &leader>;)


/* Keymap */
ZMK_CONDITIONAL_LAYER(sys, L_FN L_NUM, L_SYS) // FN + NUM --> SYS.

/ {

  keymap {
    compatible = "zmk,keymap";

    MAIN {
      display-name = "QWERTY";
      bindings = <
//╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮
   &kp ESC    &kp Q      &kp W      &kp E      &kp R      &kp T          &kp Y      &kp U      &kp I      &kp O      &kp P      &kp BSPC
//├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
   &kp TAB    &hml LGUI A &hml LALT S &hml LSHFT D &hml LCTRL F &kp G     &kp H      &hmr LCTRL J &hmr RSHFT K &hmr LALT L &hmr LGUI SQT &kp RET
//├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
   &kp LSHFT  &kp Z      &kp X      &kp C      &kp V      &kp B          &kp N      &kp M      &comma_morph &dot_morph &qexcl    &kp RSHFT
//╰──────────┴──────────┴──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┴──────────┴──────────╯
                                    &kp LCTRL  &lt_spc L_NAV 0 &lt L_FN RET   SMART_NUM  MAGIC_SHIFT &mo L_MOU
//                                 ╰──────────┴──────────┴──────────╯   ╰──────────┴──────────┴──────────╯
      >;
    };

    NAV {
      bindings = <
//╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮
   ___        &kp LA(F4) ___        &kp LS(LG(TAB)) &kp LG(TAB)  ___     &kp PG_UP  NAV_BSPC   NAV_UP     NAV_DEL    ___        ___
//├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
   ___        &sk LGUI   &sk LALT   &sk LSHFT  &sk LCTRL  ___            &kp PG_DN  NAV_LEFT   NAV_DOWN   NAV_RIGHT  &kp RET    ___
//├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
   ___        ___        ___        ___        ___        ___            &kp INS    &kp TAB    ___        ___        ___        ___
//╰──────────┴──────────┴──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┴──────────┴──────────╯
                                    ___        ___        ___            ___        ___        CANCEL
//                                 ╰──────────┴──────────┴──────────╯   ╰──────────┴──────────┴──────────╯
      >;
    };

    FUNCTIONS {
      bindings = <
//╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮
   ___        &kp F12    &kp F7     &kp F8     &kp F9     ___            ___        ___        &kp C_PREV &kp C_VOL_UP &kp C_NEXT ___
//├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
   ___        &hml LGUI F11 &hml LALT F4 &hml LSHFT F5 &hml LCTRL F6 ___     ___        ___        DESK_L     VOL_DOWN   DESK_R     ___
//├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
   ___        &kp F10    &kp F1     &kp F2     &kp F3     ___            ___        ___        ___       DSK_MGR    ___        ___
//╰──────────┴──────────┴──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┴──────────┴──────────╯
                                    ___        ___        ___            &kp C_MUTE &kp C_PP   ___
//                                 ╰──────────┴──────────┴──────────╯   ╰──────────┴──────────┴──────────╯
      >;
    };

    NUMBERS {
      bindings = <
//╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮
   ___        ___        &kp N7     &kp N8     &kp N9     ___            ___        &kp LBKT   &kp RBKT   &kp LBRC   &kp RBRC   ___
//├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
   ___        &hml LGUI N0 &hml LALT N4 &hml LSHFT N5 &hml LCTRL N6 ___       ___        &kp MINUS  &kp EQUAL  &kp PLUS   &kp STAR   ___
//├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
   ___        ___        &kp N1     &kp N2     &kp N3     ___            ___        &kp UNDER  &kp PIPE   &kp AMPS   &kp HASH   ___
//╰──────────┴──────────┴──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┴──────────┴──────────╯
                                    ___        ___        ___            ___        ___        ___
//                                 ╰──────────┴──────────┴──────────╯   ╰──────────┴──────────┴──────────╯
      >;
    };

    SYMBOLS {
      bindings = <
//╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮
   ___        ___        ___        ___        ___         ___           ___        ___        ___        ___        ___        ___
//├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
   ___        ___        ___        ___        ___         ___           ___        ___        ___        ___        ___        ___
//├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
   ___        ___        ___        ___        ___         ___           ___        ___        ___        ___        ___        ___
//╰──────────┴──────────┴──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┴──────────┴──────────╯
                                    ___        ___        ___            ___        ___        ___
//                                 ╰──────────┴──────────┴──────────╯   ╰──────────┴──────────┴──────────╯
      >;
    };
    SYSTEM {
      bindings = <
//╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮
                          _BT_SEL_KEYS_                   ___            ___        ___        ___        ___        ___        ___
//├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
   ___        ___        ___        ___        ___        &bootloader    &bootloader ___       ___        ___        ___        ___
//├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
   ___        ___        ___        ___        ___        &sys_reset     &sys_reset ___        ___        ___        ___        ___
//╰──────────┴──────────┴──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┴──────────┴──────────╯
                                    ___        ___        ___            ___        ___        ___
//                                 ╰──────────┴──────────┴──────────╯   ╰──────────┴──────────┴──────────╯
      >;
    };

    MOUSE {
      bindings = <
    //╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮
       ___        ___        ___        ___        ___        ___            ___        ___        &kp PG_UP  MS_UP     &kp PG_DN   ___
    //├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
       ___        ___        ___        ___        ___        ___            ___        MS_SCRL_L  MS_L       MS_DN     MS_R        MS_SCRL_R
    //├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
       ___        ___        ___        ___        ___        ___            ___        ___        MS_CLKL    MS_CLKM    MS_CLKR     ___
    //╰──────────┴──────────┴──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┴──────────┴──────────╯
                                        ___        ___        ___            MS_SCRL_U  MS_SCRL_D  ___
    //                                 ╰──────────┴──────────┴──────────╯   ╰──────────┴──────────┴──────────╯
      >;
    };
  };
};

/* vim: set ft=c tw=146: */
